# -*- coding: utf-8 -*-
"""WS_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ISKyLPuOqpZI-R4LtYUVg6-4-c5D2Dq
"""

import matplotlib.pyplot as plt
import math as m
import operator as op
from functools import reduce
import scipy.stats as stats
from statistics import mean

"""## **Question 1**

**Functions Required**
"""

def forward_diff_table(arr, ans, n):
  temp = []

  for i in range(1, n):
    temp.append(arr[i] - arr[i-1])

  ans.append(temp)
  ans

  while len(ans[-1]) > 1:
    temp = []

    for i in range(1, len(ans[-1])):
      temp.append(ans[-1][i] - ans[-1][i-1])

    ans.append(temp)

  return ans

def ncr(n, r, k):

  if k == 1:
    val = 1

    for i in range(r):
      val *= (n - i)

    if r == 1:
      return val

    a = val / m.factorial(r)

  else:
    val = 1

    for i in range(r):
      val *= (n + i)

    if r == 1:
      return val

    a = val / m.factorial(r)

  return a

def forward_interpolation(y_0, n, ans, u):
  val = y_0

  for i in range(n):
    val += ncr(u, i+1, 1) * ans[i][0]

  return val

def backward_interpolation(y_n, n, ans, v):
  val = y_n

  for i in range(n):
    val += ncr(v, i+1, 2) * ans[i][-1]

  return val

years = [i for i in range(1985, 1996)]
years_1 = [i for i in range(1985, 1994)]
expenditure = [731, 782, 833, 886, 956, 1049, 1159, 1267, 1367, 1436, 1505]
expenditure_1 = [731, 782, 833, 886, 956, 1049, 1159, 1267, 1367]

n = len(years)
diff = forward_diff_table(expenditure, [], n)

diff

"""**Part 1**"""

pred_vals = []
x_0 = years[0]
h = 1

for i in range(len(years)):
  u = (years[i] - x_0) / h
  pred_vals.append(forward_interpolation(expenditure[0], len(diff), diff, u))

pred_vals

plt.plot(years, expenditure)
plt.plot(years, pred_vals)

"""All predictions match the original values given

**Part 2**

Using data from 1985 to 1993 alone (years_1, expenditure_1)
"""

n_1 = len(years_1)
diff_1 = forward_diff_table(expenditure_1, [], n_1)

diff_1

x_0 = years_1[0]
x_n = years_1[-1]
h = 1

vals_to_be_predicted = [1994, 1995]
pred_expenditure = []

for i in vals_to_be_predicted:
  v = (i - x_n) / h
  pred_expenditure.append(backward_interpolation(expenditure_1[-1], len(diff_1), diff_1, v))

pred_expenditure

plt.scatter(vals_to_be_predicted, expenditure[-2:])
plt.scatter(vals_to_be_predicted, pred_expenditure)

"""**Part 3**"""

pred_exp_vals = []

for i in range(len(years)):
  if abs(years[i] - years[0]) <= abs(years[i] - years[-1]):
    u = (years[i] - x_0) / h
    pred_exp_vals.append(forward_interpolation(expenditure_1[0], len(diff_1), diff_1, u))
  
  else:
    v = (years[i] - x_n) / h
    pred_exp_vals.append(backward_interpolation(expenditure_1[-1], len(diff_1), diff_1, v))

pred_exp_vals

len(expenditure), len(pred_exp_vals)

error = []

for i in range(len(pred_exp_vals)):
  error.append(expenditure[i] - pred_exp_vals[i])

error

plt.plot(years, error)

t_statistic, p_value = stats.ttest_ind(a = expenditure, b = pred_exp_vals, equal_var = True)
print(t_statistic , p_value)

"""## **Question 2**"""

t = [i for i in range(300, 2100, 100)]
e = [0.024, 0.035, 0.046, 0.058, 0.067, 0.083, 0.097, 0.111, 0.125, 0.140, 0.155, 0.170, 0.186, 0.202, 0.219, 0.235, 0.252, 0.269]
n = len(t)
diff = forward_diff_table(e, [], n)

diff

x_0 = t[0]
x_n = t[-1]
h = 100

pred_e_vals = []

for i in range(len(t)):
  if abs(t[i] - t[0]) <= abs(t[i] - t[-1]):
    u = (t[i] - x_0) / h
    pred_e_vals.append(forward_interpolation(e[0], len(diff), diff, u))
  
  else:
    v = (t[i] - x_n) / h
    pred_e_vals.append(backward_interpolation(e[-1], len(diff), diff, v))

pred_e_vals

plt.plot(t, e)
plt.plot(t, pred_e_vals)

"""## **Question 3**

**Functions Required**
"""

def divided_diff_table(x, y):
  table = []
  n = len(x)
  temp = []

  for i in range(1, n):
    temp.append((y[i] - y[i-1])/(x[i] - x[i-1]))

  diff = 2
  table.append(temp)

  while len(table[-1]) > 1:
    temp = []
    ind = 0
    latest = table[-1]

    for i in range(1, len(latest)):
      temp.append((latest[i] - latest[i-1])/(x[ind + diff] - x[ind]))
      ind += 1

    table.append(temp)
    diff += 1

  return table

def newton_divided_diff(x, y, new_x):
  diff = divided_diff_table(x, y)
  order = len(diff)
  pred_val = y[0]
  d = 1

  for i in range(order):
    prod = 1
    
    for j in range(d):
      prod *= (new_x - x[j])

    pred_val += (prod * diff[i][0])

  return pred_val

def lagrange_interpolation(x, y, new_x):
  n = len(x)
  val = 0

  for i in range(n):
    nr_val = 1
    dr_val = 1

    for j in range(n):
      if i != j:
        nr_val *= (new_x - x[j])
        dr_val *= (x[i] - x[j])

    val += ((nr_val / dr_val)*y[i])

  return val

"""**Part 1**"""

x = [0, 1, 2, 5.5, 11, 13, 16, 18]
y = [0.5, 3.134, 5.3, 9.9, 10.2, 9.35, 7.2, 6.2]

pred_x = [301]
pred_y = []

for i in pred_x:
  pred_y.append(newton_divided_diff(x, y, i))

pred_y

"""**Part 2**"""

pred_x = [0.5, 3]
pred_y = []

for i in pred_x:
  pred_y.append(lagrange_interpolation(x, y, i))

pred_y

"""## **Question 4**"""

from scipy.interpolate import CubicSpline

t = [0, 8, 16, 24, 32, 40]
o = [14.621, 11.843, 9.870, 8.418, 7.305, 6.413]

cs = CubicSpline(t, o, bc_type = "natural")

new_t = [4, 36]
pred_o = []

for i in new_t:
  pred_o.append(cs(i))

pred_o

plt.figure(figsize = (10,8))
plt.plot(new_t, pred_o, 'ro')
plt.plot(t, o, 'green', marker = "o")
plt.title('Cubic Spline Interpolation')
plt.xlabel('x')
plt.ylabel('y')
plt.show()

from scipy import interpolate

def f(x):
    tck = interpolate.splrep(t, o)
    return interpolate.splev(x, tck)

print(f(4), f(36))